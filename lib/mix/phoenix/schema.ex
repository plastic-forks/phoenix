defmodule Mix.Phoenix.Schema do
  @moduledoc false

  def new(schema_name, schema_plural, cli_attrs, opts) do
    %Schema{
      human_singular: Phoenix.Naming.humanize(singular),
      human_plural: Phoenix.Naming.humanize(schema_plural),
      web_namespace: web_namespace,
      web_path: web_path,
      route_helper: route_helper(web_path, singular),
      route_prefix: route_prefix(web_path, schema_plural),
      api_route_prefix: api_route_prefix(web_path, schema_plural, api_prefix),
    }
  end


  @doc """
  Converts the given value to map format when it is a date, time, datetime or naive_datetime.

  Since `form_component.html.heex` generated by the live generator uses selects for dates and/or
  times, fixtures must use map format for those fields in order to submit the live form.
  """
  def live_form_value(%Date{} = date), do: Calendar.strftime(date, "%Y-%m-%d")

  def live_form_value(%Time{} = time), do: Calendar.strftime(time, "%H:%M")

  def live_form_value(%NaiveDateTime{} = naive) do
    NaiveDateTime.to_iso8601(naive)
  end

  def live_form_value(%DateTime{} = naive) do
    DateTime.to_iso8601(naive)
  end

  def live_form_value(value), do: value

  @doc """
  Build an invalid value for `@invalid_attrs` which is nil by default.

  * In case the value is a list, this will return an empty array.
  * In case the value is date, datetime, naive_datetime or time, this will return an invalid date.
  * In case it is a boolean, we keep it as false
  """
  def invalid_form_value(value) when is_list(value), do: []

  def invalid_form_value(%{day: _day, month: _month, year: _year} = _date),
    do: "2022-00"

  def invalid_form_value(%{hour: _hour, minute: _minute}), do: %{hour: 14, minute: 00}
  def invalid_form_value(true), do: false
  def invalid_form_value(_value), do: nil

  @doc """
  Generates an invalid error message according to the params present in the schema.
  """
  def failed_render_change_message(_schema) do
    "can&#39;t be blank"
  end

  defp route_helper(web_path, singular) do
    "#{web_path}_#{singular}"
    |> String.trim_leading("_")
    |> String.replace("/", "_")
  end

  defp route_prefix(web_path, plural) do
    path = Path.join(for str <- [web_path, plural], do: to_string(str))
    "/" <> String.trim_leading(path, "/")
  end

  defp api_route_prefix(web_path, plural, api_prefix) do
    path = Path.join(for str <- [api_prefix, web_path, plural], do: to_string(str))
    "/" <> String.trim_leading(path, "/")
  end
end
